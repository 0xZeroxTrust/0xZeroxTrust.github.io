---
title:  "Code injection via memory sections. Simple C++ example."
date:   2021-12-13 10:00:00 +0600
header:
  teaser: "/assets/images/32/2021-12-15_17-37.png"
categories: 
  - tutorial
tags:
  - injection
  - code injection
  - malware
  - red team
  - windows
---

ï·½

Hello, cybersecurity enthusiasts and white hackers!

![code injection](/assets/images/32/2021-12-15_17-37.png){:class="img-responsive"}    

In the previous posts I wrote about classic injections where WinAPI functions [replaced](/tutorial/2021/12/11/malware-injection-11.html) with Native API functions.   

The following post is a result of self-research of another malware development technique.    

Although the use of these trick in a regular application is an indication of something malicious, threat actors will continue to use them for process injection.    

Let's go to upload our malware to VirusTotal:    

![code injection 17](/assets/images/32/2021-12-17_20-56.png){:class="img-responsive"}    

[https://www.virustotal.com/gui/file/1573a7d59de744b0723e83539ad8dcb9347c89f27a8321ea578c8c0d98f1e2cb?nocache=1](https://www.virustotal.com/gui/file/1573a7d59de744b0723e83539ad8dcb9347c89f27a8321ea578c8c0d98f1e2cb?nocache=1)    

**So, 4 of 62 AV engines detect our file as malicious.**   

If we want, for better result, we can add [payload encryption](/tutorial/2021/09/04/simple-malware-av-evasion.html) with key or [obfuscate](/tutorial/2021/09/06/simple-malware-av-evasion-2.html) functions, or combine both of this techniques.    

I hope this post spreads awareness to the blue teamers of this interesting technique, and adds a weapon to the red teamers arsenal.      

[BlackHat USA 2019 Process Injection Techniques - Gotta Catch Them All](https://i.blackhat.com/USA-19/Thursday/us-19-Kotler-Process-Injection-Techniques-Gotta-Catch-Them-All.pdf)    
[WinDBG kernel debugging](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/performing-local-kernel-debugging)    
[NtOpenProcess](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-ntopenprocess)    
[NtCreateSection](http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FSection%2FNtCreateSection.html)    
[NtMapViewOfSection](http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FSection%2FNtMapViewOfSection.html)    
[ZwUnmapViewOfSection](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-zwunmapviewofsection)    
[Moneta64.exe](https://github.com/forrest-orr/moneta)    
[source code in Github](https://github.com/cocomelonc/2021-12-13-malware-injection-12)    

> This is a practical case for educational purposes only.      

Thanks for your time and good bye!   
*PS. All drawings and screenshots are mine*
